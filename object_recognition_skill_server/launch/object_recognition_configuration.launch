<?xml version="1.0" encoding="UTF-8"?>
<launch>

	<!-- namespace for parameters -->
	<arg name="namespace" default="object_recognition" />

	<!-- topics -->
	<arg name="pose_with_covariance_stamped_topic" default="initial_pose" /> <!-- rviz topic -->
	<arg name="pose_stamped_publish_topic" default="localization_pose" />
	<arg name="ambient_pointcloud_topic" default="/camera/depth_registered/points" />

	<!-- reference map data -->
	<arg name="reference_pointcloud_filename" default="$(find object_recognition_dataset)/models/simoldes/8080__0.5mm_sag_2mm_step.ply" />
	<arg name="reference_pointcloud_preprocessed_save_filename" default="" />
	<arg name="reference_pointcloud_available" default="true" />
	<arg name="reference_pointcloud_type" default="3D" />
	<arg name="reference_pointcloud_update_mode" default="NoIntegration" />
	<arg name="reference_pointcloud_keypoints_filename" default="" />
	<arg name="reference_pointcloud_keypoints_save_filename" default="" />
	<arg name="reference_pointcloud_descriptors_filename" default="" />
	<arg name="reference_pointcloud_descriptors_save_filename" default="" />

	<!-- frame ids -->
	<arg name="object_frame_id" default="object" />
	<arg name="sensor_frame_id" default="camera_link" />
	<arg name="odom_frame_id" default="$(arg sensor_frame_id)" />
	<arg name="base_link_frame_id" default="$(arg sensor_frame_id)" />

	<!-- initial pose setup -->
	<arg name="robot_initial_pose_in_base_to_map" default="true" />
	<arg name="robot_initial_pose_available" default="false" />
	<arg name="robot_initial_x" default="0" />
	<arg name="robot_initial_y" default="0" />
	<arg name="robot_initial_z" default="0" />
	<arg name="robot_initial_roll" default="0" />
	<arg name="robot_initial_pitch" default="0" />
	<arg name="robot_initial_yaw" default="0" />

	<!-- configuration files -->
	<arg name="yaml_configuration_configs_filename" default="$(find object_recognition_skill_server)/yaml/configs.yaml" />
	<arg name="yaml_configuration_filters_filename" default="$(find object_recognition_skill_server)/yaml/filters.yaml" />
	<arg name="yaml_configuration_filters_roi_filename" default="$(find object_recognition_skill_server)/yaml/filters_roi.yaml" />
	<arg name="yaml_configuration_normal_estimators_filename" default="$(find object_recognition_skill_server)/yaml/normal_estimators.yaml" />
	<arg name="yaml_configuration_keypoint_detectors_filename" default="$(find object_recognition_skill_server)/yaml/keypoint_detectors.yaml" />
	<arg name="yaml_configuration_initial_pose_estimators_matchers_filename" default="$(find object_recognition_skill_server)/yaml/initial_pose_estimators_matchers.yaml" />
	<arg name="yaml_configuration_tracking_filename" default="$(find object_recognition_skill_server)/yaml/pose_tracking.yaml" />
	<arg name="yaml_configuration_recovery_filename" default="$(find object_recognition_skill_server)/yaml/pose_recovery.yaml" />

	<!-- 3d processing pipeline parameters -->
	<arg name="load_initial_pose_estimation_pipeline" default="true" />
	<arg name="load_tracking_pipeline" default="false" />
	<arg name="compute_normals_when_tracking_pose" default="false" />
	<arg name="compute_keypoints_when_tracking_pose" default="false" />

	<arg name="feature_matching_publish_tf" default="true" />
	<arg name="feature_matching_tf_broadcaster_frame_id_suffix" default="feature_matching" />
	<arg name="point_matcher_intermediate" default="1_iterative_closest_point_with_normals" />
	<arg name="point_matcher_final" default="2_iterative_closest_point_with_normals" />
	<arg name="point_matching_publish_tf" default="true" />
	<arg name="point_matching_intermediate_tf_broadcaster_frame_id_suffix" default="intermediate_point_matching" />
	<arg name="point_matching_tf_broadcaster_frame_id_suffix" default="point_matching" />


	<group ns="$(arg namespace)" clear_params="true">
		<param name="frame_ids/map_frame_id" type="str" value="$(arg object_frame_id)" />
		<param name="frame_ids/odom_frame_id" type="str" value="$(arg odom_frame_id)" />
		<param name="frame_ids/base_link_frame_id" type="str" value="$(arg base_link_frame_id)" />
		<param name="frame_ids/sensor_frame_id" type="str" value="$(arg sensor_frame_id)" />
		<param name="initial_pose/robot_initial_pose_in_base_to_map" type="bool" value="$(arg robot_initial_pose_in_base_to_map)" />
		<param name="initial_pose/robot_initial_pose_available" type="bool" value="$(arg robot_initial_pose_available)" />
		<param name="initial_pose/position/x" type="double" value="$(arg robot_initial_x)" />
		<param name="initial_pose/position/y" type="double" value="$(arg robot_initial_y)" />
		<param name="initial_pose/position/z" type="double" value="$(arg robot_initial_z)" />
		<param name="initial_pose/orientation_rpy/roll" type="double" value="$(arg robot_initial_roll)" />
		<param name="initial_pose/orientation_rpy/pitch" type="double" value="$(arg robot_initial_pitch)" />
		<param name="initial_pose/orientation_rpy/yaw" type="double" value="$(arg robot_initial_yaw)" />
		<param name="subscribe_topic_names/pose_topic" type="str" value="" />
		<param name="subscribe_topic_names/pose_stamped_topic" type="str" value="" />
		<param name="subscribe_topic_names/pose_with_covariance_stamped_topic" type="str" value="$(arg pose_with_covariance_stamped_topic)" />
		<param name="subscribe_topic_names/ambient_pointcloud_topic" type="str" value="$(arg ambient_pointcloud_topic)" />
		<param name="subscribe_topic_names/reference_costmap_topic" type="str" value="" />
		<param name="subscribe_topic_names/reference_pointcloud_topic" type="str" value="" />
		<param name="publish_topic_names/pose_with_covariance_stamped_publish_topic" type="str" value="" />
		<param name="publish_topic_names/pose_stamped_publish_topic" type="str" value="$(arg pose_stamped_publish_topic)" />
		<param name="reference_pointclouds/reference_pointcloud_filename" type="str" value="$(arg reference_pointcloud_filename)" />
		<param name="reference_pointclouds/reference_pointcloud_preprocessed_save_filename" type="str" value="$(arg reference_pointcloud_preprocessed_save_filename)" />
		<param name="reference_pointclouds/reference_pointcloud_type" type="str" value="$(arg reference_pointcloud_type)" />
		<param name="reference_pointclouds/reference_pointcloud_available" type="bool" value="$(arg reference_pointcloud_available)" />
		<param name="reference_pointclouds/reference_pointcloud_update_mode" type="str" value="$(arg reference_pointcloud_update_mode)" />
		<param name="normal_estimators/ambient_pointcloud/compute_normals_when_tracking_pose" type="bool" value="$(arg compute_normals_when_tracking_pose)" />
		<param name="filters/ambient_pointcloud_filters_after_normal_estimation/1_plane_segmentation/plane_inliers_cloud_publish_topic_frame_id" type="str" value="$(arg sensor_frame_id)" />
		<param name="filters/ambient_pointcloud_filters_after_normal_estimation/1_plane_segmentation/filtered_cloud_publish_topic_frame_id" type="str" value="$(arg sensor_frame_id)" />
		<param name="filters/ambient_pointcloud_filters_after_normal_estimation/2_euclidean_clustering/clusters_colored_cloud_publish_topic_frame_id" type="str" value="$(arg sensor_frame_id)" />
		<param name="filters/ambient_pointcloud_filters_after_normal_estimation/3_random_sample/filtered_cloud_publish_topic_frame_id" type="str" value="$(arg sensor_frame_id)" />
		<param name="keypoint_detectors/reference_pointcloud/reference_pointcloud_keypoints_filename" type="str" value="$(arg reference_pointcloud_keypoints_filename)" />
		<param name="keypoint_detectors/reference_pointcloud/reference_pointcloud_keypoints_save_filename" type="str" value="$(arg reference_pointcloud_keypoints_save_filename)" />
		<param name="keypoint_detectors/ambient_pointcloud/compute_keypoints_when_tracking_pose" type="bool" value="$(arg compute_keypoints_when_tracking_pose)" />
		<param name="initial_pose_estimators_matchers/feature_matchers/reference_pointcloud_descriptors_filename" type="str" value="$(arg reference_pointcloud_descriptors_filename)" />
		<param name="initial_pose_estimators_matchers/feature_matchers/reference_pointcloud_descriptors_save_filename" type="str" value="$(arg reference_pointcloud_descriptors_save_filename)" />

		<param name="initial_pose_estimators_matchers/feature_matchers/matchers/sample_consensus_initial_alignment_prerejective/tf_publisher/publish_tf" type="bool" value="$(arg feature_matching_publish_tf)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/feature_matchers/matchers/sample_consensus_initial_alignment_prerejective/tf_publisher/tf_broadcaster_frame_id" type="str" value="$(arg base_link_frame_id)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/feature_matchers/matchers/sample_consensus_initial_alignment_prerejective/tf_publisher/tf_broadcaster_child_frame_id" type="str" value="$(arg object_frame_id)__$(arg feature_matching_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />

		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_intermediate)/tf_publisher/publish_tf" type="bool" value="$(arg point_matching_publish_tf)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_intermediate)/tf_publisher/tf_broadcaster_frame_id" type="str" value="$(arg object_frame_id)__$(arg feature_matching_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_intermediate)/tf_publisher/tf_broadcaster_child_frame_id" type="str" value="$(arg object_frame_id)__$(arg point_matching_intermediate_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />

		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_final)/tf_publisher/publish_tf" type="bool" value="$(arg point_matching_publish_tf)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_final)/tf_publisher/tf_broadcaster_frame_id" type="str" value="$(arg object_frame_id)__$(arg point_matching_intermediate_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_final)/tf_publisher/tf_broadcaster_child_frame_id" type="str" value="$(arg object_frame_id)__$(arg point_matching_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />

		<param name="initial_pose_estimators_matchers/feature_matchers/matchers/sample_consensus_initial_alignment_prerejective/reference_cloud_publish_topic_frame_id" type="str" value="$(arg object_frame_id)__$(arg feature_matching_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_intermediate)/reference_cloud_publish_topic_frame_id" type="str" value="$(arg object_frame_id)__$(arg point_matching_intermediate_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />
		<param name="initial_pose_estimators_matchers/point_matchers/$(arg point_matcher_final)/reference_cloud_publish_topic_frame_id" type="str" value="$(arg object_frame_id)__$(arg point_matching_tf_broadcaster_frame_id_suffix)" if="$(arg load_initial_pose_estimation_pipeline)" />

		<rosparam command="load" file="$(arg yaml_configuration_configs_filename)" subst_value="true" />
		<rosparam command="load" file="$(arg yaml_configuration_filters_filename)" subst_value="true" />
		<rosparam command="load" file="$(arg yaml_configuration_filters_roi_filename)" subst_value="true" />
		<rosparam command="load" file="$(arg yaml_configuration_normal_estimators_filename)" subst_value="true" />
		<rosparam command="load" file="$(arg yaml_configuration_keypoint_detectors_filename)" subst_value="true" />
		<rosparam command="load" file="$(arg yaml_configuration_initial_pose_estimators_matchers_filename)" subst_value="true" if="$(arg load_initial_pose_estimation_pipeline)" />
		<rosparam command="load" file="$(arg yaml_configuration_tracking_filename)" subst_value="true" if="$(arg load_tracking_pipeline)" />
		<rosparam command="load" file="$(arg yaml_configuration_recovery_filename)" subst_value="true" if="$(arg load_tracking_pipeline)" />
	</group>

</launch>
